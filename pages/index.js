import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { fetchBlogPosts } from '../graphql/queries'
import styles from '../styles/Home.module.css'
import { parseImageMarkdown } from '../utils'

export default function Home({ blogsData }) {
  console.log(blogsData)
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>Welcome to my blog!</h1>
      <main className={styles.main}>
        {blogsData.map((blogData) => (
          <article className={styles.card} key={blogData.id}>
            <div style={{ width: '300px' }}>
              {blogData.headerImage.src && (
                <Image
                  src={blogData.headerImage.src}
                  blurDataURL={blogData.headerImage.base64}
                  placeholder="blur"
                  width={blogData.headerImage.img.width}
                  height={blogData.headerImage.img.height}
                />
              )}
              <h2 className={styles.title}>
                <Link href={`/posts/${blogData.id}`}>{blogData.title}</Link>
              </h2>
            </div>
          </article>
        ))}
      </main>
    </div>
  )
}

export async function getStaticProps() {
  const blogPosts = await fetchBlogPosts(
    'mtliendo',
    'sample-ssr',
    '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'
  )

  let formattedBlogPosts = []
  for (let blogPost of blogPosts) {
    const id = blogPost.number
    const author = blogPost.author.login
    const title = blogPost.title
    const headerImageString = blogPost.comments.nodes[0]?.body || null
    const tags = blogPost.labels.nodes.map((label) => ({
      tag: label.name,
      color: label.color,
    }))
    const parsedHeaderImage = await parseImageMarkdown(headerImageString)
    formattedBlogPosts.push({
      id,
      author,
      title,
      tags,
      headerImage: parsedHeaderImage,
    })
  }

  return {
    props: { blogsData: formattedBlogPosts },
  }
}
// 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
